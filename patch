diff --git a/src/ryu_faucet/org/onfsdn/faucet/faucet.py b/src/ryu_faucet/org/onfsdn/faucet/faucet.py
index 56d2144..87b533a 100644
--- a/src/ryu_faucet/org/onfsdn/faucet/faucet.py
+++ b/src/ryu_faucet/org/onfsdn/faucet/faucet.py
@@ -184,6 +184,18 @@ class Faucet(app_manager.RyuApp):
         flowmods = self.valve.datapath_connect(dp.id, discovered_ports)
         self.send_flow_msgs(dp, flowmods)
 
+
+        self.logger.info("before opening netflix file")
+        netflix_src_list = tuple(open('./Netflix_AS2906', 'r'))
+        for netflix_srcc in netflix_src_list:
+            self.logger.info("initiating and inserting netflix src flow entry: %s", netflix_srcc)
+            netflix_src=netflix_srcc.strip()
+
+            flowmods = self.valve.netflix_flows_initiation(dp, netflix_src)
+            self.logger.info("after creating flowmods")
+            ## dp.send_msg(flowmods)
+            self.logger.info("done done done")
+
     @set_ev_cls(ofp_event.EventOFPPortStatus, MAIN_DISPATCHER)
     @kill_on_exception(exc_logname)
     def port_status_handler(self, ev):
diff --git a/src/ryu_faucet/org/onfsdn/faucet/valve.py b/src/ryu_faucet/org/onfsdn/faucet/valve.py
index 4926212..8c90207 100644
--- a/src/ryu_faucet/org/onfsdn/faucet/valve.py
+++ b/src/ryu_faucet/org/onfsdn/faucet/valve.py
@@ -875,3 +875,29 @@ class OVSStatelessValve(Valve):
                                 self.valve_packetout(port.number,
                                     tagged_pkt.data))
         return flowmods
+
+    def netflix_flows_initiation(self, dp, netflix_src):
+        self.logger.info("in function neflix initiation")
+        self.logger.info("dp: %s dpid: %s", dir(dp), dp.id)
+        datapath = dp
+        src_ip = netflix_src
+        part=src_ip.split("/")
+        ip=part[0]
+        self.logger.info("before ofpmatch")
+        mask="255.255.255.0"
+        match = parser.OFPMatch(ipv4_src=(ip, mask))
+        self.logger.info("after ofpmatch")
+        priority = 8000
+        table_id = 1
+        actions = [parser.OFPActionOutput(ofp.OFPP_CONTROLLER)]
+        self.logger.info("after actions")
+        self.logger.info("dp: %s, srcIp: %s match: %s priority: %s actions: %s", datapath, src_ip, match, priority, actions)
+        inst = [parser.OFPInstructionActions(ofp.OFPIT_APPLY_ACTIONS,
+                                             actions)]
+        self.logger.info("after inst")        
+        mod = parser.OFPFlowMod(datapath=datapath, cookie=self.dp.cookie,  priority=priority, table_id = self.dp.flood_table, 
+                                match=match, command=ofp.OFPFC_ADD, instructions=inst, hard_timeout=0,
+                                idle_timeout=0,
+                                flags=ofp.OFPFF_SEND_FLOW_REM)
+        self.logger.info("after mod %s", mod)
+        return mod
\ No newline at end of file
